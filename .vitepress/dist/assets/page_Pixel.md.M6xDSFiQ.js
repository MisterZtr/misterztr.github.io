import{_ as a,c as s,o as e,a2 as i}from"./chunks/framework.DznJelOd.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"page/Pixel.md","filePath":"page/Pixel.md"}'),t={name:"page/Pixel.md"},n=i(`<h3 id="чтобы-приступить-к-компиляции-pixelos-gsi" tabindex="-1">Чтобы приступить к компиляции PixelOS GSI, <a class="header-anchor" href="#чтобы-приступить-к-компиляции-pixelos-gsi" aria-label="Permalink to &quot;Чтобы приступить к компиляции PixelOS GSI,&quot;">​</a></h3><p>Вам нужно будет ознакомиться с <a href="https://source.android.com/source/using-repo.html" target="_blank" rel="noreferrer">Git and Repo</a>, <a href="https://github.com/phhusson/treble_experimentations/wiki/How-to-build-a-GSI%3F" target="_blank" rel="noreferrer">Как собрать GSI</a>, а также с темой на 4pda по [Сборке Android из исходников]</p><h3 id="создаите-директорию" tabindex="-1">Создайте директорию <a class="header-anchor" href="#создаите-директорию" aria-label="Permalink to &quot;Создайте директорию&quot;">​</a></h3><p>В качестве первого шага вам нужно создать и войти папку с соответствующим именем Для этого выполните следующие команды:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PixelOS</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PixelOS</span></span></code></pre></div><h3 id="чтобы-инициализировать-локальныи-репозитории-выполните-эту-команду" tabindex="-1">Чтобы инициализировать локальный репозиторий, выполните эту команду: <a class="header-anchor" href="#чтобы-инициализировать-локальныи-репозитории-выполните-эту-команду" aria-label="Permalink to &quot;Чтобы инициализировать локальный репозиторий, выполните эту команду:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PixelOS-AOSP/manifest.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fourteen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --git-lfs</span></span></code></pre></div><h3 id="склонируите-манифест-чтобы-добавить-необходимые-зависимости-для-gsi" tabindex="-1">Склонируйте манифест, чтобы добавить необходимые зависимости для gsi: <a class="header-anchor" href="#склонируите-манифест-чтобы-добавить-необходимые-зависимости-для-gsi" aria-label="Permalink to &quot;Склонируйте манифест, чтобы добавить необходимые зависимости для gsi:&quot;">​</a></h3><pre><code>git clone https://github.com/MisterZtr/treble_manifest.git .repo/local_manifests  -b 14
</code></pre><h3 id="после-этого-синхронизируите-исходныи-код-выполнив-эту-команду" tabindex="-1">После этого синхронизируйте исходный код, выполнив эту команду: <a class="header-anchor" href="#после-этого-синхронизируите-исходныи-код-выполнив-эту-команду" aria-label="Permalink to &quot;После этого синхронизируйте исходный код, выполнив эту команду:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sync</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force-sync</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --optimized-fetch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-tags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-clone-bundle</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prune</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nproc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre></div><h3 id="после-синхронизации-примените-патчи" tabindex="-1">После синхронизации примените патчи: <a class="header-anchor" href="#после-синхронизации-примените-патчи" aria-label="Permalink to &quot;После синхронизации примените патчи:&quot;">​</a></h3><p>Скопируйте папку patches в папку c прошивкой, а далее</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>bash patches/apply-patches.sh .</span></span></code></pre></div><h2 id="создания-makefile-для-сборки" tabindex="-1">Создания Makefile для сборки <a class="header-anchor" href="#создания-makefile-для-сборки" aria-label="Permalink to &quot;Создания Makefile для сборки&quot;">​</a></h2><p>Клонируйте этот репозиторий, а затем скопируйте pixel.mk в папку device/phh/treble находящуюся в исходниках прошивки. Затем выполните следующие команды:,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cd device/phh/treble</span></span>
<span class="line"><span>bash generate.sh pixel</span></span></code></pre></div><h3 id="используите-ccache-чтобы-ускорить-повторные-сборки" tabindex="-1">Используйте ccache, чтобы ускорить повторные сборки <a class="header-anchor" href="#используите-ccache-чтобы-ускорить-повторные-сборки" aria-label="Permalink to &quot;Используйте ccache, чтобы ускорить повторные сборки&quot;">​</a></h3><p>Вы можете добавив эти строки в файл ~/.bashrc или ~/.zshrc, чтобы не вводить их снова:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>export USE_CCACHE=1</span></span>
<span class="line"><span>export CCACHE_COMPRESS=1</span></span>
<span class="line"><span>export CCACHE_MAXSIZE=50G # 50 GB</span></span></code></pre></div><h2 id="компиляция" tabindex="-1">Компиляция <a class="header-anchor" href="#компиляция" aria-label="Permalink to &quot;Компиляция&quot;">​</a></h2><p>В папке с исходниками,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>. build/envsetup.sh</span></span>
<span class="line"><span>ccache -M 50G -F 0</span></span>
<span class="line"><span>lunch treble_arm64_bN-ap1a-userdebug</span></span>
<span class="line"><span>make systemimage -j$(nproc --all)</span></span></code></pre></div><h2 id="сжатие" tabindex="-1">Сжатие <a class="header-anchor" href="#сжатие" aria-label="Permalink to &quot;Сжатие&quot;">​</a></h2><p>После компиляции, Если вы хотите ужать полученный файл через терминал, я советую использовать <a href="https://aur.archlinux.org/packages/7-zip" target="_blank" rel="noreferrer">7-zip</a>, для быстрого и безопасного способа В папке с исходниками,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cd out/target/product/tdgsi_arm64_ab</span></span>
<span class="line"><span>7zz a system.img.xz &quot;system.img&quot;</span></span></code></pre></div><h2 id="создание-vndk-lite-варианта" tabindex="-1">Создание VNDK Lite варианта <a class="header-anchor" href="#создание-vndk-lite-варианта" aria-label="Permalink to &quot;Создание VNDK Lite варианта&quot;">​</a></h2><p>Скопируйте полученный system.img в папку treble_adapter находящцюся в корне исходников Затем,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo bash lite-adapter.sh 64 system.img</span></span></code></pre></div><h2 id="устранение-неполадок" tabindex="-1">Устранение неполадок <a class="header-anchor" href="#устранение-неполадок" aria-label="Permalink to &quot;Устранение неполадок&quot;">​</a></h2><p>Если у вас присутсвуют проблемы при применении патчей, примините эти патчи самостоятельно</p><h2 id="благодарности" tabindex="-1">Благодарности <a class="header-anchor" href="#благодарности" aria-label="Permalink to &quot;Благодарности&quot;">​</a></h2><p>Эти люди так или иначе помогали проекту, поэтому именно они должны получить все почести:</p><ul><li><a href="https://github.com/crdroidandroid" target="_blank" rel="noreferrer">crDroid Team</a></li><li><a href="https://github.com/phhusson" target="_blank" rel="noreferrer">Phhusson</a></li><li><a href="https://github.com/AndyCGYan" target="_blank" rel="noreferrer">AndyYan</a></li><li><a href="https://github.com/ponces" target="_blank" rel="noreferrer">Ponces</a></li><li><a href="https://github.com/PeterCxy" target="_blank" rel="noreferrer">Peter Cai</a></li><li><a href="https://github.com/Iceows" target="_blank" rel="noreferrer">Iceows</a></li><li><a href="https://github.com/ChonDoit" target="_blank" rel="noreferrer">ChonDoit</a></li><li><a href="https://github.com/naz664" target="_blank" rel="noreferrer">Nazim N </a></li><li><a href="https://github.com/ahnet-69" target="_blank" rel="noreferrer">Ahnet</a></li></ul>`,34),l=[n];function h(p,r,o,c,d,k){return e(),s("div",null,l)}const b=a(t,[["render",h]]);export{u as __pageData,b as default};
